@model PaginatedList<ParentContactWeb.models.Parent>


@{
    ViewData["Title"] = "Index";
}

<h1>Parent List</h1>


 search by parent or student name
<form asp-controller="Parents" asp-action="Index">
    <div class="form-actions no-color">

        <p>
            Find by name: <input type="text" name="searchTerm">
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>





<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>
                Family Name
            </th>
            <th>
                First Name
            </th>
            <th>
                CellNo
            </th>
            <th>
                Email
            </th>
            <th>
                Student
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FamilyName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CellNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Student.FirstName)
                </td>
                <td>
                    <a class="btn btn-primary" asp-action="Edit" asp-route-id="@item.ParentId">Edit</a>
                    <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.ParentId">Details</a>
                    <a class="btn btn-primary" asp-action="Create" asp-controller="Contacts" asp-route-id="@item.ParentId">New Contact</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   class="btn btn-secondary @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-secondary @nextDisabled">
    Next
</a>
